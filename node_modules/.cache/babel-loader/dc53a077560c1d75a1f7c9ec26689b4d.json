{"ast":null,"code":"import _objectSpread from \"/Users/diana/Desktop/Udemy JS Course/go-fit-pro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nconst initial_state = {\n  calories: null,\n  protein: null,\n  fat: null,\n  carbs: null,\n  customMacDone: false\n};\n\nconst calculator = (macros, state) => {\n  let calories = macros.calories,\n      protein = macros.protein,\n      fat = macros.fat,\n      carbs = macros.carbs;\n\n  if (state === \"maintain\") {\n    return _objectSpread({}, macros, {\n      customMacDone: true\n    });\n  } else if (state === \"lose\") {\n    calories = (calories - calories * 0.2).toFixed(2);\n    protein = (protein - protein * 0.2).toFixed(2);\n    fat = (fat - fat * 0.2).toFixed(2);\n    carbs = (carbs - carbs * 0.2).toFixed(2);\n    return {\n      calories,\n      protein,\n      fat,\n      carbs,\n      customMacDone: true\n    };\n  } else if (state === \"gain\") {\n    calories = (calories + calories * 0.2).toFixed(2);\n    protein = (protein + protein * 0.2).toFixed(2);\n    fat = (fat + fat * 0.2).toFixed(2);\n    carbs = (carbs + carbs * 0.2).toFixed(2);\n    return {\n      calories,\n      protein,\n      fat,\n      carbs,\n      customMacDone: true\n    };\n  }\n};\n\nconst fitnessGoals = (state = initial_state, action) => {\n  switch (action.type) {\n    case \"CUSTOM_MACROS\":\n      return calculator(action.payload[0], action.payload[1]);\n\n    default:\n      return state;\n  }\n};\n\nexport default fitnessGoals;","map":{"version":3,"sources":["/Users/diana/Desktop/Udemy JS Course/go-fit-pro/src/reducers/fitnessGoals.js"],"names":["initial_state","calories","protein","fat","carbs","customMacDone","calculator","macros","state","toFixed","fitnessGoals","action","type","payload"],"mappings":";AAAA,MAAMA,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE,IADU;AAEpBC,EAAAA,OAAO,EAAE,IAFW;AAGpBC,EAAAA,GAAG,EAAE,IAHe;AAIpBC,EAAAA,KAAK,EAAE,IAJa;AAKpBC,EAAAA,aAAa,EAAE;AALK,CAAtB;;AAQA,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AAAA,MAC9BP,QAD8B,GACIM,MADJ,CAC9BN,QAD8B;AAAA,MACpBC,OADoB,GACIK,MADJ,CACpBL,OADoB;AAAA,MACXC,GADW,GACII,MADJ,CACXJ,GADW;AAAA,MACNC,KADM,GACIG,MADJ,CACNH,KADM;;AAEpC,MAAII,KAAK,KAAK,UAAd,EAA0B;AACxB,6BAAWD,MAAX;AAAmBF,MAAAA,aAAa,EAAE;AAAlC;AACD,GAFD,MAEO,IAAIG,KAAK,KAAK,MAAd,EAAsB;AAC3BP,IAAAA,QAAQ,GAAG,CAACA,QAAQ,GAAGA,QAAQ,GAAG,GAAvB,EAA4BQ,OAA5B,CAAoC,CAApC,CAAX;AACAP,IAAAA,OAAO,GAAG,CAACA,OAAO,GAAGA,OAAO,GAAG,GAArB,EAA0BO,OAA1B,CAAkC,CAAlC,CAAV;AACAN,IAAAA,GAAG,GAAG,CAACA,GAAG,GAAGA,GAAG,GAAG,GAAb,EAAkBM,OAAlB,CAA0B,CAA1B,CAAN;AACAL,IAAAA,KAAK,GAAG,CAACA,KAAK,GAAGA,KAAK,GAAG,GAAjB,EAAsBK,OAAtB,CAA8B,CAA9B,CAAR;AACA,WAAO;AACLR,MAAAA,QADK;AAELC,MAAAA,OAFK;AAGLC,MAAAA,GAHK;AAILC,MAAAA,KAJK;AAKLC,MAAAA,aAAa,EAAE;AALV,KAAP;AAOD,GAZM,MAYA,IAAIG,KAAK,KAAK,MAAd,EAAsB;AAC3BP,IAAAA,QAAQ,GAAG,CAACA,QAAQ,GAAGA,QAAQ,GAAG,GAAvB,EAA4BQ,OAA5B,CAAoC,CAApC,CAAX;AACAP,IAAAA,OAAO,GAAG,CAACA,OAAO,GAAGA,OAAO,GAAG,GAArB,EAA0BO,OAA1B,CAAkC,CAAlC,CAAV;AACAN,IAAAA,GAAG,GAAG,CAACA,GAAG,GAAGA,GAAG,GAAG,GAAb,EAAkBM,OAAlB,CAA0B,CAA1B,CAAN;AACAL,IAAAA,KAAK,GAAG,CAACA,KAAK,GAAGA,KAAK,GAAG,GAAjB,EAAsBK,OAAtB,CAA8B,CAA9B,CAAR;AACA,WAAO;AACLR,MAAAA,QADK;AAELC,MAAAA,OAFK;AAGLC,MAAAA,GAHK;AAILC,MAAAA,KAJK;AAKLC,MAAAA,aAAa,EAAE;AALV,KAAP;AAOD;AACF,CA7BD;;AA8BA,MAAMK,YAAY,GAAG,CAACF,KAAK,GAAGR,aAAT,EAAwBW,MAAxB,KAAmC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,aAAON,UAAU,CAACK,MAAM,CAACE,OAAP,CAAe,CAAf,CAAD,EAAmBF,MAAM,CAACE,OAAP,CAAe,CAAf,CAAnB,CAAjB;;AAEF;AACE,aAAOL,KAAP;AALJ;AAOD,CARD;;AAUA,eAAeE,YAAf","sourcesContent":["const initial_state = {\n  calories: null,\n  protein: null,\n  fat: null,\n  carbs: null,\n  customMacDone: false\n};\n\nconst calculator = (macros, state) => {\n  let { calories, protein, fat, carbs } = macros;\n  if (state === \"maintain\") {\n    return {...macros, customMacDone: true};\n  } else if (state === \"lose\") {\n    calories = (calories - calories * 0.2).toFixed(2);\n    protein = (protein - protein * 0.2).toFixed(2);\n    fat = (fat - fat * 0.2).toFixed(2);\n    carbs = (carbs - carbs * 0.2).toFixed(2);\n    return {\n      calories,\n      protein,\n      fat,\n      carbs,\n      customMacDone: true\n    };\n  } else if (state === \"gain\") {\n    calories = (calories + calories * 0.2).toFixed(2);\n    protein = (protein + protein * 0.2).toFixed(2);\n    fat = (fat + fat * 0.2).toFixed(2);\n    carbs = (carbs + carbs * 0.2).toFixed(2);\n    return {\n      calories,\n      protein,\n      fat,\n      carbs,\n      customMacDone: true\n    };\n  }\n};\nconst fitnessGoals = (state = initial_state, action) => {\n  switch (action.type) {\n    case \"CUSTOM_MACROS\":\n      return calculator(action.payload[0],action.payload[1]);\n\n    default:\n      return state;\n  }\n};\n\nexport default fitnessGoals;\n"]},"metadata":{},"sourceType":"module"}